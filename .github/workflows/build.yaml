name: Build & Push binaries

permissions:
  contents: write

on:
  pull_request:
  push:
      paths-ignore:
        - '.clang-format'
        - '.gitignore'
        - 'License.md'
        - 'README.md'

jobs:
  build:
    strategy:
      fail-fast: true
      matrix:
        platform:
        - { runner: windows-latest, os: windows, arch: x64,    archive_ext: .zip }
        - { runner: ubuntu-latest,  os: linux,   arch: x86_64, archive_ext: .tar.gz }
        - { runner: macos-latest,   os: macos,   arch: x86_64, archive_ext: .tar.gz }
        mode: [debug, release]
        libkind: [shared, static]

    runs-on: ${{ matrix.platform.runner }}

    steps:
    - name: Get current date as package key
      id: cache_key
      run: echo "key=$(date +'%W')" >> $GITHUB_OUTPUT
      shell: bash

    - name: Set vs_runtime string (windows)
      if: ${{ matrix.platform.os == 'windows' }}
      run: |
        if [ "${{ matrix.mode }}" == "debug" ]; then
          if [ "${{ matrix.libkind }}" == "shared" ]; then
            echo "VS_RUNTIME_STRING=MDd" >> $GITHUB_ENV
          else
            echo "VS_RUNTIME_STRING=MTd" >> $GITHUB_ENV
          fi
        else
          if [ "${{ matrix.libkind }}" == "shared" ]; then
            echo "VS_RUNTIME_STRING=MD" >> $GITHUB_ENV
          else
            echo "VS_RUNTIME_STRING=MT" >> $GITHUB_ENV
          fi
        fi
      shell: bash

    - name: Set OUTPUT_FILE variable
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          echo "OUTPUT_FILE=${{ matrix.platform.os }}_${{ matrix.platform.arch }}_${{ matrix.mode }}_${{ matrix.libkind }}_${{ env.VS_RUNTIME_STRING }}${{ matrix.platform.archive_ext }}" >> $GITHUB_ENV
        else
          echo "OUTPUT_FILE=${{ matrix.platform.os }}_${{ matrix.platform.arch }}_${{ matrix.mode }}_${{ matrix.libkind }}${{ matrix.platform.archive_ext }}" >> $GITHUB_ENV
        fi
      shell: bash

    # Force xmake to a specific folder (for cache)
    - name: Set xmake env
      run: echo "XMAKE_GLOBALDIR=${{ runner.workspace }}/xmake-global" >> $GITHUB_ENV
      shell: bash

    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Clone the whole repository to get correct tags and branches

    # Install xmake
    - name: Setup xmake
      uses: xmake-io/github-action-setup-xmake@v1.2.2
      with:
        xmake-version: branch@dev
        actions-cache-folder: .xmake-cache-W${{ steps.cache_key.outputs.key }}

    # Update xmake repository (in order to have the file that will be cached)
    - name: Update xmake repository
      run: xmake repo --update -vD

    # Fetch xmake dephash
    - name: Retrieve dependencies hash
      id: dep_hash
      run: echo "hash=$(xmake l utils.ci.packageskey)" >> $GITHUB_OUTPUT
      shell: bash

    # Retrieve xmake dependencies
    - name: Restore cached xmake dependencies
      id: restore-depcache
      uses: actions/cache/restore@v4
      with:
        path: ${{ env.XMAKE_GLOBALDIR }}/.xmake/packages
        key: ${{ matrix.platform.os }}-${{ matrix.platform.arch }}-${{ matrix.mode }}-${{ matrix.libkind }}-${{ env.VS_RUNTIME_STRING }}-${{ steps.dep_hash.outputs.hash }}-W${{ steps.cache_key.outputs.key }}

    - name: Configure xmake and install dependencies (Unix)
      if: ${{ matrix.platform.os != 'windows' }}
      run: xmake config -vD --arch=${{ matrix.platform.arch }} --mode=${{ matrix.mode }} --kind=${{ matrix.libkind }} --yes --policies=package.precompiled:n

    - name: Configure xmake and install dependencies (Windows)
      if: ${{ matrix.platform.os == 'windows' }}
      run: xmake config -vD --arch=${{ matrix.platform.arch }} --mode=${{ matrix.mode }} --kind=${{ matrix.libkind }} --vs_runtime=${{ env.VS_RUNTIME_STRING }} --yes --policies=package.precompiled:n

    # Save dependencies
    - name: Save cached xmake dependencies
      if: ${{ !steps.restore-depcache.outputs.cache-hit }}
      uses: actions/cache/save@v4
      with:
        path: ${{ env.XMAKE_GLOBALDIR }}/.xmake/packages
        key: ${{ steps.restore-depcache.outputs.cache-primary-key }}

    - name: Build all targets
      run: xmake build -vD -a

    - name: Run tests
      run: xmake run -vD --group=TESTS

    - name: Install
      run: xmake install -vDo dest/ --group=LIBS

    - name: Archive result
      uses: ihiroky/archive-action@v1
      with:
        root_dir: dest
        file_path: ${{ env.OUTPUT_FILE }}
        verbose: true

    - name: Compute checksum of archive
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          sha256sum -b "$OUTPUT_FILE" > "$OUTPUT_FILE.sha256"
        else
          shasum -a 256 -b "$OUTPUT_FILE" > "$OUTPUT_FILE.sha256"
        fi
      shell: bash

    # Release tags (for tags)
    - name: Upload binaries to release (Tag)
      uses: svenstaro/upload-release-action@v2
      if: ${{ startsWith(github.event.ref, 'refs/tags/') }}
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ${{ env.OUTPUT_FILE }}
        asset_name: ${{ env.OUTPUT_FILE }}
        tag: ${{ github.ref }}
        overwrite: true

    - name: Upload checksum to release (Tag)
      uses: svenstaro/upload-release-action@v2
      if: ${{ startsWith(github.event.ref, 'refs/tags/') }}
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ${{ env.OUTPUT_FILE }}.sha256
        asset_name: ${{ env.OUTPUT_FILE }}.sha256
        tag: ${{ github.ref }}
        overwrite: true
